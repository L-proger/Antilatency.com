//Generated by AntilatencyApiGenerator
using Csml;
public sealed partial class Api : Scope {
	public sealed partial class Antilatency : Scope {
		public sealed partial class DeviceNetwork : Scope {
			public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"DeviceNetwork");
			public static IElement FullNameRef => new Deferred(()=>Material);
			public static Material Material => new Material("Antilatency\u200B.DeviceNetwork",null,$"Namespace in `{Api.Antilatency.FullNameRef}`")[new Section("Types")
				[new UnorderedList()
					[$"*interface* `{ICotaskConstructor.NameRef}`"]
					[$"*interface* `{INetwork.NameRef}`"]
					[$"*interface* `{IDeviceFilter.NameRef}`"]
					[$"*struct* `{UsbDeviceFilter.NameRef}`"]
					[$"*enum* `{UsbVendorId.NameRef}`"]
					[$"*struct* `{IpDeviceFilter.NameRef}`"]
					[$"*enum* `{NodeHandle.NameRef}`"]
					[$"*enum* `{NodeStatus.NameRef}`"]
					[$"*interface* `{ISynchronousConnection.NameRef}`"]
					[$"*interface* `{IPropertyCotask.NameRef}`"]
					[$"*interface* `{ICotask.NameRef}`"]
					[$"*interface* `{ICotaskBatteryPowered.NameRef}`"]
					[$"*constant group* `{Constants.NameRef}`"]
					[$"*enum* `{LogLevel.NameRef}`"]
					[$"*interface* `{ILibrary.NameRef}`"]
					[$"*interface* `{IInternalPropertyCotask.NameRef}`"]
				]
			];
			public sealed partial class UsbVendorId : Scope {
				public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"UsbVendorId");
				public static IElement FullNameRef => new Deferred(()=>Material);
				public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.UsbVendorId",null,$"Enum in `{Api.Antilatency.DeviceNetwork.FullNameRef}`")[CodeBlock];
				public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
				public static IElement RawDeclarationCode => new Text($"{Enum} {NameRef} {{\n    {Fields.Antilatency.RawDeclarationCode}\n}}");
				public sealed partial class Fields : Scope {
					public sealed partial class Antilatency : Scope {
						public static IElement RawDeclarationCode => new Text($"{Name} = 0x3237");
						public static IElement Name => new Modify($"Antilatency").SetAttributeValue("title", "enum element Antilatency");
					} //scope Antilatency
				} //scope Fields
			} //scope UsbVendorId
			
			public sealed partial class UsbDeviceFilter : Scope {
				public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"UsbDeviceFilter");
				public static IElement FullNameRef => new Deferred(()=>Material);
				public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.UsbDeviceFilter",null,$"Struct in `{Api.Antilatency.DeviceNetwork.FullNameRef}`")[CodeBlock];
				public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
				public static IElement RawDeclarationCode => new Text($"{Struct} {NameRef} {{\n    {Fields.vid.RawDeclarationCode};\n    {Fields.pid.RawDeclarationCode};\n    {Fields.pidMask.RawDeclarationCode};\n}}");
				public sealed partial class Fields : Scope {
					public sealed partial class vid : Scope {
						public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.UsbVendorId.NameRef)} {Name}");
						public static IElement Name => new Modify($"vid").SetAttributeValue("title", "field vid");
					} //scope vid
					public sealed partial class pid : Scope {
						public static IElement RawDeclarationCode => new Text($"{Keyword("ushort")} {Name}");
						public static IElement Name => new Modify($"pid").SetAttributeValue("title", "field pid");
					} //scope pid
					public sealed partial class pidMask : Scope {
						public static IElement RawDeclarationCode => new Text($"{Keyword("ushort")} {Name}");
						public static IElement Name => new Modify($"pidMask").SetAttributeValue("title", "field pidMask");
					} //scope pidMask
				} //scope Fields
			} //scope UsbDeviceFilter
			
			public sealed partial class IpDeviceFilter : Scope {
				public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"IpDeviceFilter");
				public static IElement FullNameRef => new Deferred(()=>Material);
				public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.IpDeviceFilter",null,$"Struct in `{Api.Antilatency.DeviceNetwork.FullNameRef}`")[CodeBlock];
				public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
				public static IElement RawDeclarationCode => new Text($"{Struct} {NameRef} {{\n    {Fields.ip.RawDeclarationCode};\n    {Fields.mask.RawDeclarationCode};\n}}");
				public sealed partial class Fields : Scope {
					public sealed partial class ip : Scope {
						public static IElement RawDeclarationCode => new Text($"{Keyword("string")} {Name}");
						public static IElement Name => new Modify($"ip").SetAttributeValue("title", "field ip");
					} //scope ip
					public sealed partial class mask : Scope {
						public static IElement RawDeclarationCode => new Text($"{Keyword("string")} {Name}");
						public static IElement Name => new Modify($"mask").SetAttributeValue("title", "field mask");
					} //scope mask
				} //scope Fields
			} //scope IpDeviceFilter
			
			public sealed partial class IDeviceFilter : Scope {
				public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"IDeviceFilter");
				public static IElement FullNameRef => new Deferred(()=>Material);
				public static IElement RawDeclarationCode => new Text($"{Interface} {NameRef} : InterfaceContract.{Type("IInterface")} {{\n    {Methods.addUsbDevice.RawDeclarationCode};\n    {Methods.addIpDevice.RawDeclarationCode};\n    {Methods.getUsbDevice.RawDeclarationCode};\n    {Methods.getIpDevice.RawDeclarationCode};\n}}");
				public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
				public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.IDeviceFilter",null,$"Interface in `{Api.Antilatency.DeviceNetwork.FullNameRef}`")[CodeBlock];
				public sealed partial class Methods : Scope {
					public sealed partial class addUsbDevice : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"addUsbDevice");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("void")} {NameRef}({Parameters.usbDeviceType.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.IDeviceFilter\u200B.addUsbDevice",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.IDeviceFilter.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class usbDeviceType : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.UsbDeviceFilter.NameRef)} {Name}");
								public static IElement Name => new Modify($"usbDeviceType").SetAttributeValue("title", "parameter usbDeviceType");
							} //scope usbDeviceType
						} //scope Parameters
					} //scope addUsbDevice
					public sealed partial class addIpDevice : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"addIpDevice");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("void")} {NameRef}({Parameters.ipDeviceType.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.IDeviceFilter\u200B.addIpDevice",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.IDeviceFilter.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class ipDeviceType : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.IpDeviceFilter.NameRef)} {Name}");
								public static IElement Name => new Modify($"ipDeviceType").SetAttributeValue("title", "parameter ipDeviceType");
							} //scope ipDeviceType
						} //scope Parameters
					} //scope addIpDevice
					public sealed partial class getUsbDevice : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"getUsbDevice");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.UsbDeviceFilter.NameRef)} {NameRef}({Parameters.index.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.IDeviceFilter\u200B.getUsbDevice",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.IDeviceFilter.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class index : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("uint")} {Name}");
								public static IElement Name => new Modify($"index").SetAttributeValue("title", "parameter index");
							} //scope index
						} //scope Parameters
					} //scope getUsbDevice
					public sealed partial class getIpDevice : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"getIpDevice");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.IpDeviceFilter.NameRef)} {NameRef}({Parameters.index.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.IDeviceFilter\u200B.getIpDevice",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.IDeviceFilter.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class index : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("uint")} {Name}");
								public static IElement Name => new Modify($"index").SetAttributeValue("title", "parameter index");
							} //scope index
						} //scope Parameters
					} //scope getIpDevice
				} //scope Methods
			} //scope IDeviceFilter
			
			public sealed partial class NodeHandle : Scope {
				public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"NodeHandle");
				public static IElement FullNameRef => new Deferred(()=>Material);
				public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.NodeHandle",null,$"Enum in `{Api.Antilatency.DeviceNetwork.FullNameRef}`")[CodeBlock];
				public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
				public static IElement RawDeclarationCode => new Text($"{Enum} {NameRef} {{\n    {Fields.Null.RawDeclarationCode}\n}}");
				public sealed partial class Fields : Scope {
					public sealed partial class Null : Scope {
						public static IElement RawDeclarationCode => new Text($"{Name}");
						public static IElement Name => new Modify($"Null").SetAttributeValue("title", "enum element Null");
					} //scope Null
				} //scope Fields
			} //scope NodeHandle
			
			public sealed partial class NodeStatus : Scope {
				public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"NodeStatus");
				public static IElement FullNameRef => new Deferred(()=>Material);
				public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.NodeStatus",null,$"Enum in `{Api.Antilatency.DeviceNetwork.FullNameRef}`")[CodeBlock];
				public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
				public static IElement RawDeclarationCode => new Text($"{Enum} {NameRef} {{\n    {Fields.Idle.RawDeclarationCode},\n    {Fields.TaskRunning.RawDeclarationCode},\n    {Fields.Invalid.RawDeclarationCode}\n}}");
				public sealed partial class Fields : Scope {
					public sealed partial class Idle : Scope {
						public static IElement RawDeclarationCode => new Text($"{Name}");
						public static IElement Name => new Modify($"Idle").SetAttributeValue("title", "enum element Idle");
					} //scope Idle
					public sealed partial class TaskRunning : Scope {
						public static IElement RawDeclarationCode => new Text($"{Name}");
						public static IElement Name => new Modify($"TaskRunning").SetAttributeValue("title", "enum element TaskRunning");
					} //scope TaskRunning
					public sealed partial class Invalid : Scope {
						public static IElement RawDeclarationCode => new Text($"{Name}");
						public static IElement Name => new Modify($"Invalid").SetAttributeValue("title", "enum element Invalid");
					} //scope Invalid
				} //scope Fields
			} //scope NodeStatus
			
			public sealed partial class ISynchronousConnection : Scope {
				public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"ISynchronousConnection");
				public static IElement FullNameRef => new Deferred(()=>Material);
				public static IElement RawDeclarationCode => new Text($"{Interface} {NameRef} : InterfaceContract.{Type("IInterface")} {{\n    {Methods.getPackets.RawDeclarationCode};\n    {Methods.getAvailablePackets.RawDeclarationCode};\n    {Methods.writePacket.RawDeclarationCode};\n}}");
				public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
				public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.ISynchronousConnection",null,$"Interface in `{Api.Antilatency.DeviceNetwork.FullNameRef}`")[CodeBlock];
				public sealed partial class Methods : Scope {
					/// <summary>Get received packets. Blocks until any packets received or task finished.</summary>
					/// <returns>Received packets array. Zero packets count if task is finished.</returns>
					public sealed partial class getPackets : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"getPackets");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"Interop.{Type(Api.Antilatency.DeviceNetwork.Interop.Packet.NameRef)}[] {NameRef}()");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.ISynchronousConnection\u200B.getPackets",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.ISynchronousConnection.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
						} //scope Parameters
					} //scope getPackets
					/// <summary>Get received packets.</summary>
					/// <param name = "taskFinished">
					/// Is task finished.
					/// </param>
					/// <returns>Received packets array. Zero packets count if no packets received.</returns>
					public sealed partial class getAvailablePackets : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"getAvailablePackets");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"Interop.{Type(Api.Antilatency.DeviceNetwork.Interop.Packet.NameRef)}[] {NameRef}({Parameters.taskFinished.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.ISynchronousConnection\u200B.getAvailablePackets",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.ISynchronousConnection.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class taskFinished : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("bool")} {Name}");
								public static IElement Name => new Modify($"taskFinished").SetAttributeValue("title", "parameter taskFinished");
							} //scope taskFinished
						} //scope Parameters
					} //scope getAvailablePackets
					public sealed partial class writePacket : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"writePacket");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("bool")} {NameRef}({Parameters.packet.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.ISynchronousConnection\u200B.writePacket",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.ISynchronousConnection.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class packet : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"Interop.{Type(Api.Antilatency.DeviceNetwork.Interop.Packet.NameRef)} {Name}");
								public static IElement Name => new Modify($"packet").SetAttributeValue("title", "parameter packet");
							} //scope packet
						} //scope Parameters
					} //scope writePacket
				} //scope Methods
			} //scope ISynchronousConnection
			
			public sealed partial class ICotask : Scope {
				public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"ICotask");
				public static IElement FullNameRef => new Deferred(()=>Material);
				public static IElement RawDeclarationCode => new Text($"{Interface} {NameRef} : InterfaceContract.{Type("IInterface")} {{\n    {Methods.isTaskFinished.RawDeclarationCode};\n}}");
				public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
				public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.ICotask",null,$"Interface in `{Api.Antilatency.DeviceNetwork.FullNameRef}`")[CodeBlock];
				public sealed partial class Methods : Scope {
					public sealed partial class isTaskFinished : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"isTaskFinished");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("bool")} {NameRef}()");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.ICotask\u200B.isTaskFinished",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.ICotask.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
						} //scope Parameters
					} //scope isTaskFinished
				} //scope Methods
			} //scope ICotask
			
			public sealed partial class IPropertyCotask : Scope {
				public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"IPropertyCotask");
				public static IElement FullNameRef => new Deferred(()=>Material);
				public static IElement RawDeclarationCode => new Text($"{Interface} {NameRef} : {Type(Api.Antilatency.DeviceNetwork.ICotask.NameRef)} {{\n    {Methods.getPropertyKey.RawDeclarationCode};\n    {Methods.getStringProperty.RawDeclarationCode};\n    {Methods.setStringProperty.RawDeclarationCode};\n    {Methods.getBinaryProperty.RawDeclarationCode};\n    {Methods.setBinaryProperty.RawDeclarationCode};\n    {Methods.deleteProperty.RawDeclarationCode};\n}}");
				public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
				public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.IPropertyCotask",null,$"Interface in `{Api.Antilatency.DeviceNetwork.FullNameRef}`")[CodeBlock];
				public sealed partial class Methods : Scope {
					public sealed partial class getPropertyKey : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"getPropertyKey");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("string")} {NameRef}({Parameters.index.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.IPropertyCotask\u200B.getPropertyKey",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.IPropertyCotask.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class index : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("uint")} {Name}");
								public static IElement Name => new Modify($"index").SetAttributeValue("title", "parameter index");
							} //scope index
						} //scope Parameters
					} //scope getPropertyKey
					public sealed partial class getStringProperty : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"getStringProperty");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("string")} {NameRef}({Parameters.key.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.IPropertyCotask\u200B.getStringProperty",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.IPropertyCotask.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class key : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("string")} {Name}");
								public static IElement Name => new Modify($"key").SetAttributeValue("title", "parameter key");
							} //scope key
						} //scope Parameters
					} //scope getStringProperty
					public sealed partial class setStringProperty : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"setStringProperty");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("void")} {NameRef}({Parameters.key.RawDeclarationCode}, {Parameters.value.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.IPropertyCotask\u200B.setStringProperty",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.IPropertyCotask.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class key : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("string")} {Name}");
								public static IElement Name => new Modify($"key").SetAttributeValue("title", "parameter key");
							} //scope key
							public sealed partial class value : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("string")} {Name}");
								public static IElement Name => new Modify($"value").SetAttributeValue("title", "parameter value");
							} //scope value
						} //scope Parameters
					} //scope setStringProperty
					public sealed partial class getBinaryProperty : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"getBinaryProperty");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("byte")}[] {NameRef}({Parameters.key.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.IPropertyCotask\u200B.getBinaryProperty",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.IPropertyCotask.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class key : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("string")} {Name}");
								public static IElement Name => new Modify($"key").SetAttributeValue("title", "parameter key");
							} //scope key
						} //scope Parameters
					} //scope getBinaryProperty
					public sealed partial class setBinaryProperty : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"setBinaryProperty");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("void")} {NameRef}({Parameters.key.RawDeclarationCode}, {Parameters.value.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.IPropertyCotask\u200B.setBinaryProperty",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.IPropertyCotask.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class key : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("string")} {Name}");
								public static IElement Name => new Modify($"key").SetAttributeValue("title", "parameter key");
							} //scope key
							public sealed partial class value : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("byte")}[] {Name}");
								public static IElement Name => new Modify($"value").SetAttributeValue("title", "parameter value");
							} //scope value
						} //scope Parameters
					} //scope setBinaryProperty
					public sealed partial class deleteProperty : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"deleteProperty");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("void")} {NameRef}({Parameters.key.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.IPropertyCotask\u200B.deleteProperty",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.IPropertyCotask.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class key : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("string")} {Name}");
								public static IElement Name => new Modify($"key").SetAttributeValue("title", "parameter key");
							} //scope key
						} //scope Parameters
					} //scope deleteProperty
				} //scope Methods
			} //scope IPropertyCotask
			
			public sealed partial class INetwork : Scope {
				public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"INetwork");
				public static IElement FullNameRef => new Deferred(()=>Material);
				public static IElement RawDeclarationCode => new Text($"{Interface} {NameRef} : InterfaceContract.{Type("IInterface")} {{\n    {Methods.getUpdateId.RawDeclarationCode};\n    {Methods.getDeviceFilter.RawDeclarationCode};\n    {Methods.getNodes.RawDeclarationCode};\n    {Methods.nodeGetStatus.RawDeclarationCode};\n    {Methods.nodeIsTaskSupported.RawDeclarationCode};\n    {Methods.nodeGetParent.RawDeclarationCode};\n    {Methods.nodeGetPhysicalPath.RawDeclarationCode};\n    {Methods.nodeStartTask.RawDeclarationCode};\n    {Methods.nodeStartTask2.RawDeclarationCode};\n    {Methods.nodeGetStringProperty.RawDeclarationCode};\n    {Methods.nodeGetBinaryProperty.RawDeclarationCode};\n    {Methods.nodeStartPropertyTask.RawDeclarationCode};\n}}");
				public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
				public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.INetwork",null,$"Interface in `{Api.Antilatency.DeviceNetwork.FullNameRef}`")[CodeBlock];
				public sealed partial class Methods : Scope {
					/// <summary>Every time any supported device is connected or disconnected, the update ID will be incremented. You can use this method to check if there are any changes in the ADN.</summary>
					/// <returns>Current factory update ID.</returns>
					public sealed partial class getUpdateId : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"getUpdateId");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("uint")} {NameRef}()");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.INetwork\u200B.getUpdateId",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.INetwork.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
						} //scope Parameters
					} //scope getUpdateId
					/// <summary></summary>
					/// <returns></returns>
					public sealed partial class getDeviceFilter : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"getDeviceFilter");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.IDeviceFilter.NameRef)} {NameRef}()");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.INetwork\u200B.getDeviceFilter",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.INetwork.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
						} //scope Parameters
					} //scope getDeviceFilter
					/// <summary>Get all currently connected nodes.</summary>
					public sealed partial class getNodes : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"getNodes");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.NodeHandle.NameRef)}[] {NameRef}()");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.INetwork\u200B.getNodes",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.INetwork.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
						} //scope Parameters
					} //scope getNodes
					/// <summary>Get the current NodeStatus for the node.</summary>
					/// <param name = "node">
					/// Node handle to get status of.
					/// </param>
					public sealed partial class nodeGetStatus : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"nodeGetStatus");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.NodeStatus.NameRef)} {NameRef}({Parameters.node.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.INetwork\u200B.nodeGetStatus",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.INetwork.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class node : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.NodeHandle.NameRef)} {Name}");
								public static IElement Name => new Modify($"node").SetAttributeValue("title", "parameter node");
							} //scope node
						} //scope Parameters
					} //scope nodeGetStatus
					/// <summary>Checks if the task is supported by the node.</summary>
					/// <param name = "node">
					/// Node handle.
					/// </param>
					/// <param name = "taskId">
					/// Task ID.
					/// </param>
					/// <returns>True if node supports such task, otherwise false.</returns>
					public sealed partial class nodeIsTaskSupported : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"nodeIsTaskSupported");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("bool")} {NameRef}({Parameters.node.RawDeclarationCode}, {Parameters.taskId.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.INetwork\u200B.nodeIsTaskSupported",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.INetwork.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class node : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.NodeHandle.NameRef)} {Name}");
								public static IElement Name => new Modify($"node").SetAttributeValue("title", "parameter node");
							} //scope node
							public sealed partial class taskId : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("Guid")} {Name}");
								public static IElement Name => new Modify($"taskId").SetAttributeValue("title", "parameter taskId");
							} //scope taskId
						} //scope Parameters
					} //scope nodeIsTaskSupported
					/// <summary>Get parent for the node, in case of USB node this method will return Antilatency.DeviceNetwork.NodeHandle.Null</summary>
					/// <param name = "node">
					/// Node handle.
					/// </param>
					public sealed partial class nodeGetParent : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"nodeGetParent");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.NodeHandle.NameRef)} {NameRef}({Parameters.node.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.INetwork\u200B.nodeGetParent",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.INetwork.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class node : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.NodeHandle.NameRef)} {Name}");
								public static IElement Name => new Modify($"node").SetAttributeValue("title", "parameter node");
							} //scope node
						} //scope Parameters
					} //scope nodeGetParent
					/// <summary>Physical address path to the first level device that contains this node in the network tree.</summary>
					/// <param name = "node">
					/// Node handle.
					/// </param>
					/// <returns>String represents physical path to first level device (connected via USB).</returns>
					public sealed partial class nodeGetPhysicalPath : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"nodeGetPhysicalPath");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("string")} {NameRef}({Parameters.node.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.INetwork\u200B.nodeGetPhysicalPath",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.INetwork.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class node : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.NodeHandle.NameRef)} {Name}");
								public static IElement Name => new Modify($"node").SetAttributeValue("title", "parameter node");
							} //scope node
						} //scope Parameters
					} //scope nodeGetPhysicalPath
					/// <summary>Run the task on the node with the asynchronous packet receive API.</summary>
					/// <param name = "node">
					/// Node handle to start task on.
					/// </param>
					/// <param name = "taskId">
					/// Task ID.
					/// </param>
					/// <param name = "taskDataReceiver">
					/// Task data receiver.
					/// </param>
					public sealed partial class nodeStartTask : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"nodeStartTask");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"Interop.{Type(Api.Antilatency.DeviceNetwork.Interop.IDataReceiver.NameRef)} {NameRef}({Parameters.node.RawDeclarationCode}, {Parameters.taskId.RawDeclarationCode}, {Parameters.taskDataReceiver.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.INetwork\u200B.nodeStartTask",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.INetwork.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class node : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.NodeHandle.NameRef)} {Name}");
								public static IElement Name => new Modify($"node").SetAttributeValue("title", "parameter node");
							} //scope node
							public sealed partial class taskId : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("Guid")} {Name}");
								public static IElement Name => new Modify($"taskId").SetAttributeValue("title", "parameter taskId");
							} //scope taskId
							public sealed partial class taskDataReceiver : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"Interop.{Type(Api.Antilatency.DeviceNetwork.Interop.IDataReceiver.NameRef)} {Name}");
								public static IElement Name => new Modify($"taskDataReceiver").SetAttributeValue("title", "parameter taskDataReceiver");
							} //scope taskDataReceiver
						} //scope Parameters
					} //scope nodeStartTask
					/// <summary>Run the task on the node with the synchronous packet receive API.</summary>
					/// <param name = "node">
					/// Node handle to start task on.
					/// </param>
					/// <param name = "taskId">
					/// Task ID.
					/// </param>
					public sealed partial class nodeStartTask2 : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"nodeStartTask2");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.ISynchronousConnection.NameRef)} {NameRef}({Parameters.node.RawDeclarationCode}, {Parameters.taskId.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.INetwork\u200B.nodeStartTask2",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.INetwork.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class node : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.NodeHandle.NameRef)} {Name}");
								public static IElement Name => new Modify($"node").SetAttributeValue("title", "parameter node");
							} //scope node
							public sealed partial class taskId : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("Guid")} {Name}");
								public static IElement Name => new Modify($"taskId").SetAttributeValue("title", "parameter taskId");
							} //scope taskId
						} //scope Parameters
					} //scope nodeStartTask2
					/// <summary>Get the node's string property value.</summary>
					/// <param name = "node">
					/// Node handle to get string property from.
					/// </param>
					/// <param name = "key">
					/// Property key. List of predefined properties you can find in the documentation, also there are some properties defined in the Antilatency.DeviceNetwork.Constants that is valid for every Antilatency device.
					/// </param>
					/// <returns>The node's string property value.</returns>
					public sealed partial class nodeGetStringProperty : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"nodeGetStringProperty");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("string")} {NameRef}({Parameters.node.RawDeclarationCode}, {Parameters.key.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.INetwork\u200B.nodeGetStringProperty",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.INetwork.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class node : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.NodeHandle.NameRef)} {Name}");
								public static IElement Name => new Modify($"node").SetAttributeValue("title", "parameter node");
							} //scope node
							public sealed partial class key : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("string")} {Name}");
								public static IElement Name => new Modify($"key").SetAttributeValue("title", "parameter key");
							} //scope key
						} //scope Parameters
					} //scope nodeGetStringProperty
					/// <summary>Get the node's binary property value.</summary>
					/// <param name = "node">
					/// Node handle to get binary property from.
					/// </param>
					/// <param name = "key">
					/// Property key.
					/// </param>
					/// <returns>The node's binary property value.</returns>
					public sealed partial class nodeGetBinaryProperty : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"nodeGetBinaryProperty");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("byte")}[] {NameRef}({Parameters.node.RawDeclarationCode}, {Parameters.key.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.INetwork\u200B.nodeGetBinaryProperty",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.INetwork.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class node : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.NodeHandle.NameRef)} {Name}");
								public static IElement Name => new Modify($"node").SetAttributeValue("title", "parameter node");
							} //scope node
							public sealed partial class key : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Keyword("string")} {Name}");
								public static IElement Name => new Modify($"key").SetAttributeValue("title", "parameter key");
							} //scope key
						} //scope Parameters
					} //scope nodeGetBinaryProperty
					/// <summary>Start the property task on the node.</summary>
					/// <param name = "node">
					/// Node handle to start property task on.
					/// </param>
					public sealed partial class nodeStartPropertyTask : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"nodeStartPropertyTask");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.IPropertyCotask.NameRef)} {NameRef}({Parameters.node.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.INetwork\u200B.nodeStartPropertyTask",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.INetwork.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class node : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.NodeHandle.NameRef)} {Name}");
								public static IElement Name => new Modify($"node").SetAttributeValue("title", "parameter node");
							} //scope node
						} //scope Parameters
					} //scope nodeStartPropertyTask
				} //scope Methods
			} //scope INetwork
			
			public sealed partial class ICotaskConstructor : Scope {
				public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"ICotaskConstructor");
				public static IElement FullNameRef => new Deferred(()=>Material);
				public static IElement RawDeclarationCode => new Text($"{Interface} {NameRef} : InterfaceContract.{Type("IInterface")} {{\n    {Methods.isSupported.RawDeclarationCode};\n    {Methods.findSupportedNodes.RawDeclarationCode};\n}}");
				public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
				public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.ICotaskConstructor",null,$"Interface in `{Api.Antilatency.DeviceNetwork.FullNameRef}`")[CodeBlock];
				public sealed partial class Methods : Scope {
					public sealed partial class isSupported : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"isSupported");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("bool")} {NameRef}({Parameters.network.RawDeclarationCode}, {Parameters.node.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.ICotaskConstructor\u200B.isSupported",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.ICotaskConstructor.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class network : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.INetwork.NameRef)} {Name}");
								public static IElement Name => new Modify($"network").SetAttributeValue("title", "parameter network");
							} //scope network
							public sealed partial class node : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.NodeHandle.NameRef)} {Name}");
								public static IElement Name => new Modify($"node").SetAttributeValue("title", "parameter node");
							} //scope node
						} //scope Parameters
					} //scope isSupported
					public sealed partial class findSupportedNodes : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"findSupportedNodes");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.NodeHandle.NameRef)}[] {NameRef}({Parameters.network.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.ICotaskConstructor\u200B.findSupportedNodes",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.ICotaskConstructor.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class network : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.INetwork.NameRef)} {Name}");
								public static IElement Name => new Modify($"network").SetAttributeValue("title", "parameter network");
							} //scope network
						} //scope Parameters
					} //scope findSupportedNodes
				} //scope Methods
			} //scope ICotaskConstructor
			
			public sealed partial class ICotaskBatteryPowered : Scope {
				public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"ICotaskBatteryPowered");
				public static IElement FullNameRef => new Deferred(()=>Material);
				public static IElement RawDeclarationCode => new Text($"{Interface} {NameRef} : {Type(Api.Antilatency.DeviceNetwork.ICotask.NameRef)} {{\n    {Methods.getBatteryLevel.RawDeclarationCode};\n}}");
				public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
				public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.ICotaskBatteryPowered",null,$"Interface in `{Api.Antilatency.DeviceNetwork.FullNameRef}`")[CodeBlock];
				public sealed partial class Methods : Scope {
					/// <summary>Get actual battery level.</summary>
					/// <returns>Battery level in range 0 .. 1. Value 0 - empty battery, value 1 - full battery.</returns>
					public sealed partial class getBatteryLevel : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"getBatteryLevel");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("float")} {NameRef}()");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.ICotaskBatteryPowered\u200B.getBatteryLevel",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.ICotaskBatteryPowered.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
						} //scope Parameters
					} //scope getBatteryLevel
				} //scope Methods
			} //scope ICotaskBatteryPowered
			
			public sealed partial class Constants : Scope {
				public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"Constants");
				public static IElement FullNameRef => new Deferred(()=>Material);
				public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.Constants",null,$"Constants in `{Api.Antilatency.DeviceNetwork.FullNameRef}`");
			} //scope Constants
			
			public sealed partial class LogLevel : Scope {
				public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"LogLevel");
				public static IElement FullNameRef => new Deferred(()=>Material);
				public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.LogLevel",null,$"Enum in `{Api.Antilatency.DeviceNetwork.FullNameRef}`")[CodeBlock];
				public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
				public static IElement RawDeclarationCode => new Text($"{Enum} {NameRef} {{\n    {Fields.Trace.RawDeclarationCode},\n    {Fields.Debug.RawDeclarationCode},\n    {Fields.Info.RawDeclarationCode},\n    {Fields.Warning.RawDeclarationCode},\n    {Fields.Error.RawDeclarationCode},\n    {Fields.Critical.RawDeclarationCode},\n    {Fields.Off.RawDeclarationCode}\n}}");
				public sealed partial class Fields : Scope {
					public sealed partial class Trace : Scope {
						public static IElement RawDeclarationCode => new Text($"{Name}");
						public static IElement Name => new Modify($"Trace").SetAttributeValue("title", "enum element Trace");
					} //scope Trace
					public sealed partial class Debug : Scope {
						public static IElement RawDeclarationCode => new Text($"{Name}");
						public static IElement Name => new Modify($"Debug").SetAttributeValue("title", "enum element Debug");
					} //scope Debug
					public sealed partial class Info : Scope {
						public static IElement RawDeclarationCode => new Text($"{Name}");
						public static IElement Name => new Modify($"Info").SetAttributeValue("title", "enum element Info");
					} //scope Info
					public sealed partial class Warning : Scope {
						public static IElement RawDeclarationCode => new Text($"{Name}");
						public static IElement Name => new Modify($"Warning").SetAttributeValue("title", "enum element Warning");
					} //scope Warning
					public sealed partial class Error : Scope {
						public static IElement RawDeclarationCode => new Text($"{Name}");
						public static IElement Name => new Modify($"Error").SetAttributeValue("title", "enum element Error");
					} //scope Error
					public sealed partial class Critical : Scope {
						public static IElement RawDeclarationCode => new Text($"{Name}");
						public static IElement Name => new Modify($"Critical").SetAttributeValue("title", "enum element Critical");
					} //scope Critical
					public sealed partial class Off : Scope {
						public static IElement RawDeclarationCode => new Text($"{Name}");
						public static IElement Name => new Modify($"Off").SetAttributeValue("title", "enum element Off");
					} //scope Off
				} //scope Fields
			} //scope LogLevel
			
			public sealed partial class ILibrary : Scope {
				public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"ILibrary");
				public static IElement FullNameRef => new Deferred(()=>Material);
				public static IElement RawDeclarationCode => new Text($"{Interface} {NameRef} : InterfaceContract.{Type("IInterface")} {{\n    {Methods.createFilter.RawDeclarationCode};\n    {Methods.createNetwork.RawDeclarationCode};\n    {Methods.getVersion.RawDeclarationCode};\n    {Methods.setLogLevel.RawDeclarationCode};\n}}");
				public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
				public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.ILibrary",null,$"Interface in `{Api.Antilatency.DeviceNetwork.FullNameRef}`")[CodeBlock];
				public sealed partial class Methods : Scope {
					public sealed partial class createFilter : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"createFilter");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.IDeviceFilter.NameRef)} {NameRef}()");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.ILibrary\u200B.createFilter",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.ILibrary.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
						} //scope Parameters
					} //scope createFilter
					/// <summary>Create Antilatency Device Network object</summary>
					/// <param name = "deviceDescription">
					/// </param>
					public sealed partial class createNetwork : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"createNetwork");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.INetwork.NameRef)} {NameRef}({Parameters.deviceFilter.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.ILibrary\u200B.createNetwork",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.ILibrary.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class deviceFilter : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.IDeviceFilter.NameRef)} {Name}");
								public static IElement Name => new Modify($"deviceFilter").SetAttributeValue("title", "parameter deviceFilter");
							} //scope deviceFilter
						} //scope Parameters
					} //scope createNetwork
					/// <summary>Get the Antilatency Device Network library version.</summary>
					public sealed partial class getVersion : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"getVersion");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("string")} {NameRef}()");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.ILibrary\u200B.getVersion",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.ILibrary.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
						} //scope Parameters
					} //scope getVersion
					/// <summary>Set the Antilatency Device Network log verbosity level.</summary>
					public sealed partial class setLogLevel : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"setLogLevel");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("void")} {NameRef}({Parameters.level.RawDeclarationCode})");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.ILibrary\u200B.setLogLevel",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.ILibrary.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
							public sealed partial class level : Scope {
								public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
								public static IElement CodeInline => CodeInline(RawDeclarationCode);
								public static IElement RawDeclarationCode => new Text($"{Type(Api.Antilatency.DeviceNetwork.LogLevel.NameRef)} {Name}");
								public static IElement Name => new Modify($"level").SetAttributeValue("title", "parameter level");
							} //scope level
						} //scope Parameters
					} //scope setLogLevel
				} //scope Methods
			} //scope ILibrary
			
			public sealed partial class IInternalPropertyCotask : Scope {
				public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"IInternalPropertyCotask");
				public static IElement FullNameRef => new Deferred(()=>Material);
				public static IElement RawDeclarationCode => new Text($"{Interface} {NameRef} : {Type(Api.Antilatency.DeviceNetwork.IPropertyCotask.NameRef)} {{\n    {Methods.allowAccessToSystemProperties.RawDeclarationCode};\n}}");
				public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
				public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.IInternalPropertyCotask",null,$"Interface in `{Api.Antilatency.DeviceNetwork.FullNameRef}`")[CodeBlock];
				public sealed partial class Methods : Scope {
					public sealed partial class allowAccessToSystemProperties : Scope {
						public static IElement NameRef => new Deferred(()=>Material).Modify().ContentReplace($"allowAccessToSystemProperties");
						public static IElement FullNameRef => new Deferred(()=>Material);
						public static IElement CodeBlock => CodeBlock(RawDeclarationCode);
						public static IElement CodeInline => CodeInline(RawDeclarationCode);
						public static IElement RawDeclarationCode => new Text($"{Keyword("void")} {NameRef}()");
						public static Material Material => new Material("Antilatency\u200B.DeviceNetwork\u200B.IInternalPropertyCotask\u200B.allowAccessToSystemProperties",null,$"Method of `{Type(Api.Antilatency.DeviceNetwork.IInternalPropertyCotask.NameRef)}`\n`{RawDeclarationCode}`")
							[new Section("Parameters")]
							;
						public sealed partial class Parameters : Scope {
						} //scope Parameters
					} //scope allowAccessToSystemProperties
				} //scope Methods
			} //scope IInternalPropertyCotask
			
			
		} //scope DeviceNetwork
	} //scope Antilatency
} //scope Api
