{"Content":"// Copyright (c) 2020 ALT LLC\n// \n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of source code located below and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//  \n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//  \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nusing System;\nusing System.Threading;\n\nusing Antilatency;\nusing Antilatency.DeviceNetwork;\nusing Antilatency.Alt.Tracking;\nusing Antilatency.StorageClient;\n\nclass Program {\n    static void Main(string[] args) {\n        var trackignExample = new AltTrackingExample();\n        while (true) {\n            var node = trackignExample.WaitForNode();\n            trackignExample.RunTrackingTask(node);\n        }\n    }\n}\n\nclass AltTrackingExample {\n    private Antilatency.DeviceNetwork.ILibrary _adnLibrary;\n    private Antilatency.DeviceNetwork.INetwork _deviceNetwork;\n\n    private Antilatency.Alt.Tracking.ILibrary _altTrackingLibrary;\n    private Antilatency.Alt.Tracking.ITrackingCotask _trackingCotask;\n    private Antilatency.Alt.Tracking.IEnvironment _environment;\n    private Antilatency.Math.floatP3Q _placement;\n\n    private Antilatency.StorageClient.ILibrary _antilatencyStorageClientLibrary;\n\n    public AltTrackingExample() {\n        //Load libraries.\n        _adnLibrary = Antilatency.DeviceNetwork.Library.load();\n        _antilatencyStorageClientLibrary = Antilatency.StorageClient.Library.load();\n        _altTrackingLibrary = Antilatency.Alt.Tracking.Library.load();\n\n        if (_adnLibrary == null) {\n            throw new Exception(\"Failed to load AntilatencyDeviceNetwork library\");\n        }\n\n        if (_antilatencyStorageClientLibrary == null) {\n            throw new Exception(\"Failed to load AntilatencyStorageClient library\");\n        }\n\n        if (_altTrackingLibrary == null) {\n            throw new Exception(\"Failed to load AntilatencyAltTracking library\");\n        }\n\n        //Set log verbosity level for Antilatency Device Network library.\n        _adnLibrary.setLogLevel(LogLevel.Info);\n\n        Console.WriteLine(\"Antilatency Device Network version: \" + _adnLibrary.getVersion());\n\n        //Create Antilatency Device Network.\n        _deviceNetwork = _adnLibrary.createNetwork(new[] { new UsbDeviceType { vid = UsbVendorId.Antilatency, pid = 0x0000 } });\n\n        //Read default environment code from AntilatencyService.\n        var environmentCode = _antilatencyStorageClientLibrary.getLocalStorage().read(\"environment\", \"default\");\n\n        //Read default placement code from AntilatencyService.\n        var placementCode = _antilatencyStorageClientLibrary.getLocalStorage().read(\"placement\", \"default\");\n\n        //Create placement using code received from storage.\n        _placement = new Antilatency.Math.floatP3Q();\n        if (string.IsNullOrEmpty(placementCode)) {\n            Console.WriteLine(\"Failed to get placement code, using identity placement\");\n            _placement.position.x = 0;\n            _placement.position.y = 0;\n            _placement.position.z = 0;\n\n            _placement.rotation.x = 0;\n            _placement.rotation.y = 0;\n            _placement.rotation.z = 0;\n            _placement.rotation.w = 1;\n        } else {\n            _placement = _altTrackingLibrary.createPlacement(placementCode);\n        }\n\n        Console.WriteLine(\n                string.Format(\"Placement offset: {0}, {1}, {2}, rotation: {3}, {4}, {5}, {6}\",\n                _placement.position.x, _placement.position.y, _placement.position.z,\n                _placement.rotation.x, _placement.rotation.y, _placement.rotation.z, _placement.rotation.w\n                )\n            );\n\n        //Create environment using code received from storage.\n        _environment = _altTrackingLibrary.createEnvironment(environmentCode);\n\n        //Get all tracking markers from environment. For flexible environments markers position will be initialized with some default values\n        //and then tracking will correct positions to match markers as close as possible to real positions.\n        var markers = _environment.getMarkers();\n        for (var i = 0; i < markers.Length; ++i) {\n            Console.WriteLine(string.Format(\"Environment marker position: ({0}, {1}, {2})\", markers[i].x, markers[i].y, markers[i].z));\n        }\n    }\n\n    /// <summary>\n    /// Checks if any idle tracking node exists.\n    /// </summary>\n    /// <returns>First idle tracking node.</returns>\n    public Antilatency.DeviceNetwork.NodeHandle WaitForNode() {\n        Console.WriteLine(\"Waiting for tracking node...\");\n\n        var node = new NodeHandle();\n        var networkUpdateId = 0u;\n        do {\n            //Every time any node is connected, disconnected or node status is changed, network update id is incremented.\n            var updateId = _deviceNetwork.getUpdateId();\n            if (networkUpdateId != updateId) {\n                networkUpdateId = updateId;\n\n                Console.WriteLine(\"Network update id has been incremented, searching for available tracking node...\");\n\n                node = GetTrackingNode();\n\n                if (node == Antilatency.DeviceNetwork.NodeHandle.Null) {\n                    Console.WriteLine(\"Tracking node not found.\");\n                }\n            }\n        } while (node == Antilatency.DeviceNetwork.NodeHandle.Null);\n\n        Console.WriteLine(\"Tracking node found, serial number: \" + _deviceNetwork.nodeGetStringProperty(node, Antilatency.DeviceNetwork.Interop.Constants.HardwareSerialNumberKey));\n\n        return node;\n    }\n\n    /// <summary>\n    /// Returns the first idle alt tracker node just for demonstration purposes.\n    /// </summary>\n    private Antilatency.DeviceNetwork.NodeHandle GetTrackingNode() {\n        var result = new NodeHandle();\n\n        using (var trackingConstructor = _altTrackingLibrary.createTrackingCotaskConstructor()) {\n            //Get all nodes that support tracking task.\n            var nodes = trackingConstructor.findSupportedNodes(_deviceNetwork);\n            foreach (var node in nodes) {\n                //If node status is idle (no task currently running) then we can start tracking task on this node.\n                if (_deviceNetwork.nodeGetStatus(node) == NodeStatus.Idle) {\n                    result = node;\n                    break;\n                }\n            }\n            return result;\n        }\n    }\n\n    /// <summary>\n    /// Start tracking task on node and print tracking data while node is connected and task has not been stopped.\n    /// </summary>\n    /// <param name=\"node\">Node to start tracking on.</param>\n    public void RunTrackingTask(Antilatency.DeviceNetwork.NodeHandle node) {\n        //Create tracking cotask (run tracking on node).\n        _trackingCotask = _altTrackingLibrary.createTrackingCotaskConstructor().startTask(_deviceNetwork, node, _environment);\n\n        while (!_trackingCotask.isTaskFinished()) {\n            //Get raw tracker state without extrapolation and placement correction\n            var rawState = _trackingCotask.getState(Antilatency.Alt.Tracking.Constants.DefaultAngularVelocityAvgTime);\n            Console.WriteLine(string.Format(\"Raw tracker position: ({0}, {1}, {2})\", rawState.pose.position.x, rawState.pose.position.y, rawState.pose.position.z));\n\n            //Get extrapolated tracker state with placement correction\n            var extrapolatedState = _trackingCotask.getExtrapolatedState(_placement, 0.06f);\n            Console.WriteLine(string.Format(\"Extrapolated tracker position: ({0}, {1}, {2})\", extrapolatedState.pose.position.x, extrapolatedState.pose.position.y, extrapolatedState.pose.position.z));\n\n            //Get current tracking stability stage\n            Console.WriteLine(\"Current tracking stage: \" + extrapolatedState.stability.stage);\n\n            //5 FPS pose printing\n            Thread.Sleep(200);\n        }\n\n        StopTracking();\n    }\n\n    /// <summary>\n    /// Stop tracking task.\n    /// </summary>\n    private void StopTracking() {\n        Antilatency.Utils.SafeDispose(ref _trackingCotask);\n    }\n\n    /// <summary>\n    /// Cleanup at object destroy.\n    /// </summary>\n    ~AltTrackingExample() {\n        StopTracking();\n\n        Antilatency.Utils.SafeDispose(ref _altTrackingLibrary);\n        Antilatency.Utils.SafeDispose(ref _antilatencyStorageClientLibrary);\n        Antilatency.Utils.SafeDispose(ref _deviceNetwork);\n        Antilatency.Utils.SafeDispose(ref _adnLibrary);\n    }\n}\n","Hash":"antilatencyTrackingMinimalDemoCSharp1d6c92ff9553e183f91898c3108b6760f88475c1Program.cs"}