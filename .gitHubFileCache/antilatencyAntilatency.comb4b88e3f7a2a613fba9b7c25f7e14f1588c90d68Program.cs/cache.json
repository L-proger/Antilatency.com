{"Content":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Threading;\nusing Csml;\n\nnamespace Csml {\n\n\n\n    static class Program {\n        static void Main(string[] args) {\n            #region CsmlEngineMain\n\n            //Set dot decimal separator\n            var customCulture = (System.Globalization.CultureInfo)System.Threading.Thread.CurrentThread.CurrentCulture.Clone();\n            customCulture.NumberFormat.NumberDecimalSeparator = \".\";\n            System.Globalization.CultureInfo.DefaultThreadCurrentCulture = customCulture;\n\n            ScopeUtils.EnableGetOnce();\n\n            GitHub.RepositoryBranch.IgnorePinning = true;\n\n\n            var context = new Context {\n                SourceRootDirectory = Path.GetDirectoryName(Utils.ThisFilePath()),\n                Watch = true\n            };\n            Cache.RootDirectory = Path.Combine(context.SourceRootDirectory, \"cache\");\n\n            using (new Stopwatch(\"Verify\")) {\n                ScopeUtils.All.ForEach(x => x.Verify());\n            }\n\n\n            context.AssetsToCopy = Directory.GetFiles(context.SourceRootDirectory, \"*.ttf\", SearchOption.AllDirectories)\n                .Concat(Directory.GetFiles(context.SourceRootDirectory, \"*.woff\", SearchOption.AllDirectories))\n                .Concat(Directory.GetFiles(context.SourceRootDirectory, \"*.woff2\", SearchOption.AllDirectories))\n                .Concat(Directory.GetFiles(context.SourceRootDirectory, \"*.svg\", SearchOption.AllDirectories))\n                .ToHashSet();\n\n            /*.ForEach(x => context.AssetsToCopy.Add(x));\n            .ForEach(x => context.AssetsToCopy.Add(x));\n            Directory.GetFiles(context.SourceRootDirectory, \"*.svg\", SearchOption.AllDirectories).ForEach(x => context.AssetsToCopy.Add(x));*/\n\n\n            if (args.Length == 1) {\n                \n\n                context.OutputRootDirectory = args[0];\n\n                context.BaseUri = new Uri(context.OutputRootDirectory + \"/\");\n                context.CleanOutputRootDirectory();\n                context.CopyAssets();\n\n                SassProcessor sassProcessor = new SassProcessor(\n                    context.SourceRootDirectory,\n                    context.OutputRootDirectory,\n                    \"Assets/style.scss\");\n                JavascriptProcessor javascriptProcessor = new JavascriptProcessor(\n                    context.SourceRootDirectory,\n                    context.OutputRootDirectory);\n\n\n                ScopeUtils.All.ForEach(x => {\n                    //Log.Info.Here($\"Generation Scope {x.GetType().Name}\");\n                    x.Generate(context);\n                    \n                    });\n\n                Console.WriteLine(\"All files generated!\");\n                Console.WriteLine();\n\n                if (context.Watch) {\n                    Console.WriteLine(\"Watching for file changes. Press any key to exit.\");\n                    bool reloadRequired = true;\n\n                    string ScssError = null;\n                    while (Console.KeyAvailable == false) {\n                        if (reloadRequired) {\n                            F5.Send();\n                            reloadRequired = false;\n                        }\n                        if (sassProcessor.Error != ScssError) {\n                            ScssError = sassProcessor.Error;\n                            Console.Clear();\n                            if (ScssError != null) {\n                                Console.WriteLine(\"Scss:\" + ScssError);\n                            }\n                        }\n                        Thread.Sleep(250);\n                        reloadRequired |= sassProcessor.UpdateIfChanged();\n                        reloadRequired |= javascriptProcessor.UpdateIfChanged();\n                    }\n\n                }\n            }\n            #endregion\n        }\n    }\n}\n","Hash":"antilatencyAntilatency.comb4b88e3f7a2a613fba9b7c25f7e14f1588c90d68Program.cs"}